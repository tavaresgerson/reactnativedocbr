import{_ as s,c as a,o as i,a4 as e}from"./chunks/framework.nQaBHiNx.js";const F=JSON.parse('{"title":"Acelerando sua fase de construção","description":"","frontmatter":{},"headers":[],"relativePath":"docs/build-speed.md","filePath":"docs/build-speed.md"}'),n={name:"docs/build-speed.md"},o=e(`<h1 id="acelerando-sua-fase-de-construcao" tabindex="-1">Acelerando sua fase de construção <a class="header-anchor" href="#acelerando-sua-fase-de-construcao" aria-label="Permalink to &quot;Acelerando sua fase de construção&quot;">​</a></h1><p>Construir seu aplicativo React Native pode ser caro e levar vários minutos do tempo dos desenvolvedores. Isso pode ser problemático à medida que seu projeto cresce e geralmente em organizações maiores com vários desenvolvedores React Native.</p><p>Para mitigar esse impacto no desempenho, esta página compartilha algumas sugestões sobre como melhorar o tempo de construção.</p><div class="info custom-block"><p class="custom-block-title"><strong>INFORMAÇÕES</strong></p><p>Se você notar um tempo de construção mais lento com a nova arquitetura no Android, recomendamos atualizar para o React Native 0.71</p></div><h2 id="crie-apenas-uma-abi-durante-o-desenvolvimento-somente-android" tabindex="-1">Crie apenas uma ABI durante o desenvolvimento (somente Android) <a class="header-anchor" href="#crie-apenas-uma-abi-durante-o-desenvolvimento-somente-android" aria-label="Permalink to &quot;Crie apenas uma ABI durante o desenvolvimento (somente Android)&quot;">​</a></h2><p>Ao construir seu aplicativo Android localmente, por padrão você constrói todas as <a href="https://developer.android.com/ndk/guides/abis" target="_blank" rel="noreferrer">4 interfaces binárias de aplicativo</a> (ABIs): <code>armeabi-v7a</code>, <code>arm64-v8a</code>, <code>x86</code> e <code>x86_64</code>.</p><p>No entanto, você provavelmente não precisará compilar todos eles se estiver compilando localmente e testando seu emulador ou em um dispositivo físico.</p><p>Isso deve reduzir o tempo de construção nativo em um fator de aproximadamente 75%.</p><p>Se estiver usando o React Native CLI, você pode adicionar o sinalizador <code>--active-arch-only</code> ao comando run-Android. Este sinalizador garantirá que a ABI correta seja obtida no emulador em execução ou no telefone conectado. Para confirmar se essa abordagem está funcionando bem, você verá uma mensagem como <code>info Detected Architectures arm64-v8a</code> no console.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> react-native</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run-android</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --active-arch-only</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[ ... ]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Running</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jetifier</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> migrate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> libraries</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> AndroidX.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> You</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> can</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> disable</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> it</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> using</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;--no-jetifier&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> flag.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Jetifier</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> found</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1037</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> forward-jetify.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Using</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 32</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> workers...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> JS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> already</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> running.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Detected</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> architectures</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> arm64-v8a</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Installing</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app...</span></span></code></pre></div><p>Este mecanismo depende da propriedade <code>reactNativeArchitectures</code> do Gradle.</p><p>Portanto, se você estiver compilando diretamente com o Gradle na linha de comando e sem a CLI, poderá especificar a ABI que deseja compilar da seguinte maneira:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> :app:assembleDebug</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -PreactNativeArchitectures=x86,x86_64</span></span></code></pre></div><p>Isso pode ser útil se você deseja construir seu aplicativo Android em um CI e usar uma matriz para paralelizar a construção das diferentes arquiteturas.</p><p>Se desejar, você também pode substituir esse valor localmente, usando o arquivo <code>gradle.properties</code> que você possui na pasta de nível superior do seu projeto:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Use esta propriedade para especificar qual arquitetura você deseja construir.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Você também pode substituí-lo na CLI usando</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ./gradlew &lt;task&gt; -PreactNativeArchitectures=x86_64</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">reactNativeArchitectures</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">armeabi-v7a,arm64-v8a,x86,x86_64</span></span></code></pre></div><p>Depois de criar uma versão de lançamento do seu aplicativo, não se esqueça de remover esses sinalizadores, pois deseja criar um pacote apk/app que funcione para todas as ABIs e não apenas para aquela que você está usando em seu fluxo de trabalho de desenvolvimento diário.</p><h2 id="use-um-cache-do-compilador" tabindex="-1">Use um cache do compilador <a class="header-anchor" href="#use-um-cache-do-compilador" aria-label="Permalink to &quot;Use um cache do compilador&quot;">​</a></h2><p>Se você estiver executando compilações nativas frequentes (C++ ou Objective-C), poderá se beneficiar do uso de um cache do compilador.</p><p>Especificamente, você pode usar dois tipos de caches: caches de compilador local e caches de compilador distribuídos.</p><h3 id="caches-locais" tabindex="-1">Caches locais <a class="header-anchor" href="#caches-locais" aria-label="Permalink to &quot;Caches locais&quot;">​</a></h3><div class="info custom-block"><p class="custom-block-title"><strong>INFORMAÇÕES</strong></p><p>As instruções a seguir funcionarão para Android e iOS. Se você estiver criando apenas aplicativos Android, você deve estar pronto. Se você também estiver criando aplicativos iOS, siga as instruções na seção Configuração específica do XCode abaixo.</p></div><p>Sugerimos usar o <a href="https://ccache.dev/" target="_blank" rel="noreferrer">ccache</a> para armazenar em cache a compilação de suas compilações nativas. O <strong>Ccache</strong> funciona agrupando os compiladores C++, armazenando os resultados da compilação e ignorando a compilação se um resultado intermediário da compilação tiver sido originalmente armazenado.</p><p>Para instalá-lo, você pode seguir as <a href="https://github.com/ccache/ccache/blob/master/doc/INSTALL.md" target="_blank" rel="noreferrer">instruções oficiais de instalação</a>.</p><p>No macOS, podemos instalar o <strong>ccache</strong> com <code>brew install ccache</code>. Depois de instalado, você pode configurá-lo da seguinte maneira para armazenar em cache os resultados da compilação do NDK:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ln</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> $(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">which</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ccache)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/local/bin/gcc</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ln</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> $(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">which</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ccache)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/local/bin/g++</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ln</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> $(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">which</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ccache)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/local/bin/cc</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ln</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> $(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">which</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ccache)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/local/bin/c++</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ln</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> $(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">which</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ccache)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/local/bin/clang</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ln</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> $(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">which</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ccache)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/local/bin/clang++</span></span></code></pre></div><p>Isso criará links simbólicos para o <code>ccache</code> dentro do <code>/usr/local/bin/</code> que são chamados de <code>gcc</code>, <code>g++</code> e assim por diante.</p><p>Isso funciona desde que <code>/usr/local/bin/</code> venha primeiro que <code>/usr/bin/</code> dentro de sua variável <code>$PATH</code>, que é o padrão.</p><p>Você pode verificar se funciona usando o comando <code>which</code>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> which</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gcc</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/usr/local/bin/gcc</span></span></code></pre></div><p>Se o resultado for <code>/usr/local/bin/gcc</code>, então você está efetivamente chamando o <code>ccache</code>, que agrupará as chamadas do <code>gcc</code>.</p><div class="warning custom-block"><p class="custom-block-title"><strong>CUIDADO</strong></p><p>Observe que esta configuração do <code>ccache</code> afetará todas as compilações que você está executando em sua máquina, não apenas aquelas relacionadas ao React Native. Use-o por sua conta e risco. Se você não conseguir instalar/compilar outro software, esse pode ser o motivo. Se for esse o caso, você pode remover o link simbólico criado com:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unlink</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/local/bin/gcc</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unlink</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/local/bin/g++</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unlink</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/local/bin/cc</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unlink</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/local/bin/c++</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unlink</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/local/bin/clang</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unlink</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/local/bin/clang++</span></span></code></pre></div><p>para reverter sua máquina ao status original e usar os compiladores padrão.</p></div><p>Você pode então fazer duas compilações limpas (por exemplo, no Android você pode primeiro executar o <code>yarn react-native run-android</code>, excluir a pasta <code>android/app/build</code> e executar o primeiro comando mais uma vez). Você notará que a segunda compilação foi muito mais rápida que a primeira (deve levar segundos em vez de minutos). Durante a construção, você pode verificar se o <code>ccache</code> funciona corretamente e verificar a taxa de acertos/erros do cache <code>ccache -s</code></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ccache</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Summary:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  Hits:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">             196</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  3068</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (6.39 </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Direct:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">           0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  3068</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (0.00 </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Preprocessed:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   196</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  3068</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (6.39 </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  Misses:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          2872</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Direct:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        3068</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Preprocessed:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  2872</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  Uncacheable:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Primary</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> storage:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  Hits:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">             196</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  6136</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (3.19 </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  Misses:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          5940</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  Cache</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (GB): 0.60 / 20.00 (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">3.00</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> %</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Observe que o <code>ccache</code> agrega as estatísticas de todas as compilações. Você pode usar <code>ccache --zero-stats</code> para redefini-los antes de uma compilação para verificar a taxa de acertos do cache.</p><p>Se precisar limpar seu cache, você pode fazer isso com <code>ccache --clear</code></p><h3 id="configuracao-especifica-do-xcode" tabindex="-1">Configuração específica do XCode <a class="header-anchor" href="#configuracao-especifica-do-xcode" aria-label="Permalink to &quot;Configuração específica do XCode&quot;">​</a></h3><p>Para garantir que o <code>ccache</code> funcione corretamente com iOS e XCode, você precisa seguir algumas etapas extras:</p><ol><li>Você deve alterar a forma como o Xcode e o <code>xcodebuild</code> chamam o comando do compilador. Por padrão eles usam caminhos totalmente especificados para os binários do compilador, portanto os links simbólicos instalados em <code>/usr/local/bin</code> não serão usados. Você pode configurar o Xcode para usar nomes relativos para os compiladores usando qualquer uma destas duas opções:</li></ol><ul><li>Variáveis de ambiente prefixadas na linha de comando se você usar uma linha de comando direta: <code>CLANG=clang CLANGPLUSPLUS=clang++ LD=clang LDPLUSPLUS=clang++ xcodebuild &lt;resto da linha de comando do xcodebuild&gt;</code></li><li>Uma seção <code>post_install</code> em seu <code>ios/Podfile</code> que altera o compilador em seu espaço de trabalho Xcode durante a etapa de instalação do pod:</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>  post_install do |installer|</span></span>
<span class="line"><span>    react_native_post_install(installer)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    # ...possibly other post_install items here</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    installer.pods_project.targets.each do |target|</span></span>
<span class="line"><span>      target.build_configurations.each do |config|</span></span>
<span class="line"><span>        # Using the un-qualified names means you can swap in different implementations, for example ccache</span></span>
<span class="line"><span>        config.build_settings[&quot;CC&quot;] = &quot;clang&quot;</span></span>
<span class="line"><span>        config.build_settings[&quot;LD&quot;] = &quot;clang&quot;</span></span>
<span class="line"><span>        config.build_settings[&quot;CXX&quot;] = &quot;clang++&quot;</span></span>
<span class="line"><span>        config.build_settings[&quot;LDPLUSPLUS&quot;] = &quot;clang++&quot;</span></span>
<span class="line"><span>      end</span></span>
<span class="line"><span>    end</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    __apply_Xcode_12_5_M1_post_install_workaround(installer)</span></span>
<span class="line"><span>  end</span></span></code></pre></div><ol start="2"><li>Você precisa de uma configuração de <code>ccache</code> que permita um certo nível de negligência e comportamento de cache, de modo que o <code>ccache</code> registre ocorrências de cache durante as compilações do Xcode. As variáveis de configuração do <code>ccache</code> que são diferentes do padrão são as seguintes se configuradas pela variável de ambiente:</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CCACHE_SLOPPINESS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">clang_index_store,file_stat_matches,include_file_ctime,include_file_mtime,ivfsoverlay,pch_defines,modules,system_headers,time_macros</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CCACHE_FILECLONE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CCACHE_DEPEND</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CCACHE_INODECACHE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div><p>O mesmo pode ser configurado em um arquivo <code>ccache.conf</code> ou qualquer outro mecanismo fornecido pelo <code>ccache</code>. Mais sobre isso pode ser encontrado no manual oficial do <a href="https://ccache.dev/manual/4.3.html" target="_blank" rel="noreferrer"><code>ccache</code></a>.</p><h3 id="usando-esta-abordagem-em-um-ic" tabindex="-1">Usando esta abordagem em um IC <a class="header-anchor" href="#usando-esta-abordagem-em-um-ic" aria-label="Permalink to &quot;Usando esta abordagem em um IC&quot;">​</a></h3><p>Ccache usa a pasta <code>/Users/$USER/Library/Caches/ccache</code> no macOS para armazenar o cache. Portanto, você pode salvar e restaurar a pasta correspondente também no CI para acelerar suas compilações.</p><p>No entanto, há algumas coisas que você deve estar ciente:</p><ol><li><p>No CI, recomendamos fazer uma compilação totalmente limpa, para evitar problemas de cache envenenado. Se você seguir a abordagem mencionada no parágrafo anterior, poderá paralelizar a construção nativa em 4 ABIs diferentes e provavelmente não precisará do ccache no CI.</p></li><li><p>O <code>ccache</code> depende de carimbos de data/hora para calcular uma ocorrência no cache. Isso não funciona bem no CI, pois os arquivos são baixados novamente a cada execução do CI. Para superar isso, você precisará usar a opção de conteúdo <code>compiler_check</code>, que depende do <a href="https://ccache.dev/manual/4.3.html" target="_blank" rel="noreferrer">hash do conteúdo do arquivo</a>.</p></li></ol><h2 id="caches-distribuidos" tabindex="-1">Caches distribuídos <a class="header-anchor" href="#caches-distribuidos" aria-label="Permalink to &quot;Caches distribuídos&quot;">​</a></h2><p>Semelhante aos caches locais, você pode considerar o uso de um cache distribuído para suas compilações nativas. Isso pode ser especificamente útil em organizações maiores que fazem compilações nativas frequentes.</p><p>Recomendamos usar <a href="https://github.com/mozilla/sccache" target="_blank" rel="noreferrer">sccache</a> para conseguir isso. <a href="https://github.com/mozilla/sccache/blob/main/docs/DistributedQuickstart.md" target="_blank" rel="noreferrer">Seguimos o início rápido da compilação distribuída do sccache</a> para obter instruções sobre como configurar e usar esta ferramenta.</p>`,51),t=[o];function l(p,r,c,h,d,k){return i(),a("div",null,t)}const g=s(n,[["render",l]]);export{F as __pageData,g as default};
