import{_ as s,c as a,o as e,a4 as i}from"./chunks/framework.nQaBHiNx.js";const g=JSON.parse('{"title":"Perfil com Hermes","description":"","frontmatter":{},"headers":[],"relativePath":"docs/profile-hermes.md","filePath":"docs/profile-hermes.md"}'),o={name:"docs/profile-hermes.md"},r=i(`<h1 id="perfil-com-hermes" tabindex="-1">Perfil com Hermes <a class="header-anchor" href="#perfil-com-hermes" aria-label="Permalink to &quot;Perfil com Hermes&quot;">​</a></h1><p>Você pode visualizar o desempenho do JavaScript em um aplicativo React Native usando <a href="https://github.com/facebook/hermes" target="_blank" rel="noreferrer">Hermes</a>. Hermes é um mecanismo JavaScript pequeno e leve otimizado para executar React Native (você pode ler mais sobre <a href="/docs/hermes.html">como usá-lo com React Native aqui</a>). Hermes ajuda a melhorar o desempenho do aplicativo e também expõe maneiras de analisar o desempenho do JavaScript que ele executa.</p><p>Nesta seção, você aprenderá como criar o perfil de seu aplicativo React Native em execução no Hermes e como visualizar o perfil usando a guia <a href="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference" target="_blank" rel="noreferrer">Desempenho no Chrome DevTools</a></p><blockquote><p><strong>CUIDADO</strong> Certifique-se de <a href="/docs/hermes.html">ativar o Hermes</a> em seu aplicativo antes de começar!</p></blockquote><p>Siga as instruções abaixo para começar a criar o perfil:</p><ul><li>Grave um perfil de amostragem Hermes</li><li>Execute o comando da CLI</li><li>Abra o perfil baixado no Chrome DevTools</li></ul><h2 id="grave-um-perfil-de-amostragem-hermes" tabindex="-1">Grave um perfil de amostragem Hermes <a class="header-anchor" href="#grave-um-perfil-de-amostragem-hermes" aria-label="Permalink to &quot;Grave um perfil de amostragem Hermes&quot;">​</a></h2><p>Para gravar um perfil de amostragem no menu Dev:</p><ol><li>Navegue até o terminal do servidor Metro em execução.</li><li>Pressione <code>d</code> para abrir o <strong>menu Dev</strong>.</li><li>Selecione <strong>Enable Sampling Profiler</strong>.</li><li>Execute seu JavaScript em seu aplicativo (pressione botões, etc.)</li><li>Abra o <strong>menu Dev</strong> pressionando <code>d</code> novamente.</li><li>Selecione <strong>Disable Sampling Profiler</strong> para interromper a gravação e salvar o sampler profiler.</li></ol><p>Um toast mostrará o local onde o criador de perfil de amostragem foi salvo, geralmente em <code>/data/user/0/com.appName/cache/*.cpuprofile</code></p><p><img src="https://github.com/tavaresgerson/reactnativedocbr/assets/22455192/0228b86b-8078-47ff-be37-4341b87bc35b" alt="image"></p><h2 id="execute-o-comando-da-cli" tabindex="-1">Execute o comando da CLI <a class="header-anchor" href="#execute-o-comando-da-cli" aria-label="Permalink to &quot;Execute o comando da CLI&quot;">​</a></h2><p>Você pode usar a CLI do React Native para converter o perfil de rastreamento Hermes em perfil de rastreamento do Chrome e, em seguida, enviá-lo para sua máquina local usando:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npx react-native profile-hermes [diretorioDestino]</span></span></code></pre></div><h3 id="habilitando-mapa-de-origem" tabindex="-1">Habilitando mapa de origem <a class="header-anchor" href="#habilitando-mapa-de-origem" aria-label="Permalink to &quot;Habilitando mapa de origem&quot;">​</a></h3><blockquote><p><strong>INFORMAÇÕES</strong> Você pode ler sobre <a href="/docs/sourcemaps.html">mapas de origem</a> na página de mapas de origem.</p></blockquote><h3 id="erros-comuns" tabindex="-1">Erros comuns <a class="header-anchor" href="#erros-comuns" aria-label="Permalink to &quot;Erros comuns&quot;">​</a></h3><p><code>adb: no devices/emulators found</code> ou <code>adb: device offline</code></p><ul><li><strong>Por que isso acontece:</strong> A CLI não pode acessar o dispositivo ou emulador (por meio do adb) que você está usando para executar o aplicativo.</li><li><strong>Como corrigir:</strong> Certifique-se de que seu dispositivo/emulador Android esteja conectado e funcionando. O comando só funciona quando pode acessar o adb.</li></ul><p><code>There is no file in the cache/ directory</code></p><ul><li><strong>Por que isso acontece:</strong> A CLI não consegue encontrar nenhum arquivo <code>.cpuprofile</code> no diretório <code>cache/</code> do seu aplicativo. Você pode ter esquecido de gravar um perfil do dispositivo.</li><li><strong>Como corrigir:</strong> Siga as instruções para ativar/desativar o criador de perfil do dispositivo.</li></ul><p><code>Erro: your_profile_name.cpuprofile é um arquivo vazio</code></p><ul><li><strong>Por que isso acontece:</strong> O perfil está vazio, pode ser porque o Hermes não está funcionando corretamente.</li><li><strong>Como corrigir:</strong> Certifique-se de que seu aplicativo esteja rodando na versão mais recente do Hermes.</li></ul><h2 id="abra-o-perfil-baixado-no-chrome-devtools" tabindex="-1">Abra o perfil baixado no Chrome DevTools <a class="header-anchor" href="#abra-o-perfil-baixado-no-chrome-devtools" aria-label="Permalink to &quot;Abra o perfil baixado no Chrome DevTools&quot;">​</a></h2><p>Para abrir o perfil no Chrome DevTools:</p><ol><li>Abra o Chrome DevTools.</li><li>Selecione a guia <strong>Performance</strong>.</li><li>Clique com o botão direito e escolha <strong>Carregar perfil...</strong></li></ol><p><img src="https://github.com/tavaresgerson/reactnativedocbr/assets/22455192/cbc1a9ed-d094-49fb-9e4e-98ccf0043b35" alt="image"></p><h2 id="como-funciona-o-transformador-de-perfil-hermes" tabindex="-1">Como funciona o transformador de perfil Hermes? <a class="header-anchor" href="#como-funciona-o-transformador-de-perfil-hermes" aria-label="Permalink to &quot;Como funciona o transformador de perfil Hermes?&quot;">​</a></h2><p>O Hermes Sample Profile tem o formato de <code>objeto JSON</code>, enquanto o formato suportado pelo DevTools do Google é <code>JSON Array Format</code>. (Mais informações sobre os formatos podem ser encontradas no documento <a href="https://docs.google.com/document/d/1CvAClvFfyA5R-PhYUmn5OOQtYMH4h6I0nSsKchNAySU/preview" target="_blank" rel="noreferrer">Trace Event Format</a>)</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HermesCPUProfile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  traceEvents</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SharedEventProperties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[];</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  samples</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HermesSample</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[];</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  stackFrames</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HermesStackFrame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>O perfil Hermes tem a maior parte de suas informações codificadas nas amostras (samples) e nas propriedades stackFrames. Cada amostra é um instantâneo da pilha de chamadas de função naquele carimbo de data/hora específico, pois cada amostra possui uma propriedade <code>sf</code> que corresponde a uma chamada de função.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HermesSample</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  cpu</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  ts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  pid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  tid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  weight</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   * Irá se referir a um elemento no objeto stackFrames do Perfil Hermes</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   */</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  sf</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  stackFrameData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HermesStackFrame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>As informações sobre uma chamada de função podem ser encontradas em <code>stackFrames</code> que contém pares chave-objeto, onde a chave é o número <code>sf</code> e o objeto correspondente nos fornece todas as informações relevantes sobre a função, incluindo o número <code>sf</code> de sua função pai. Esse relacionamento pai-filho pode ser rastreado para cima para encontrar as informações de todas as funções em execução em um carimbo de data/hora específico.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HermesStackFrame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  line</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  column</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  funcLine</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  funcColumn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  category</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   * Uma função pai pode ou não existir</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   */</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  parent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Neste ponto, você deve definir mais alguns termos, a saber:</p><ol><li>Nós: os objetos correspondentes aos números <code>sf</code> em <code>stackFrames</code></li><li>Nós ativos: os nós que estão atualmente em execução em um carimbo de data/hora específico. Um nó é classificado como em execução se seu número <code>sf</code> estiver na pilha de chamadas de função. Esta pilha de chamadas pode ser obtida a partir do número <code>sf</code> da amostra e rastreada para cima até que os <code>sf</code>s pai estejam disponíveis</li></ol><p>As amostras e os <code>stackFrames</code> em conjunto podem então ser usados para gerar todos os eventos de início e término nos carimbos de data/hora correspondentes, em que:</p><ol><li>Nós/Eventos iniciais: nós ausentes na pilha de chamadas de função da amostra anterior, mas presentes na amostra atual.</li><li>Nós finais/eventos: nós presentes na pilha de chamadas de função da amostra anterior, mas ausentes na amostra atual.</li></ol><p><img src="https://github.com/tavaresgerson/reactnativedocbr/assets/22455192/f2cb7952-3230-4efc-9956-6fc4ea615536" alt="image"></p><p>Agora você pode construir um <code>flamechart</code> de chamadas de função, pois possui todas as informações da função, incluindo seus carimbos de data e hora de início e término.</p><p>O hermes-profile-transformer pode converter qualquer perfil gerado usando Hermes em um formato que pode ser exibido diretamente no Chrome DevTools. Mais informações sobre isso podem ser encontradas em <a href="https://github.com/react-native-community/hermes-profile-transformer" target="_blank" rel="noreferrer">@react-native-community/hermes-profile-transformer</a>.</p>`,41),n=[r];function t(l,p,h,d,c,k){return e(),a("div",null,n)}const u=s(o,[["render",t]]);export{g as __pageData,u as default};
