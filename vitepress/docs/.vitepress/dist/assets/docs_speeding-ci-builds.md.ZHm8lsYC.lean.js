import{_ as a,c as e,o as i,a4 as s}from"./chunks/framework.nQaBHiNx.js";const k=JSON.parse('{"title":"Acelerando as compilações de CI","description":"","frontmatter":{},"headers":[],"relativePath":"docs/speeding-ci-builds.md","filePath":"docs/speeding-ci-builds.md"}'),o={name:"docs/speeding-ci-builds.md"},n=s(`<h1 id="acelerando-as-compilacoes-de-ci" tabindex="-1">Acelerando as compilações de CI <a class="header-anchor" href="#acelerando-as-compilacoes-de-ci" aria-label="Permalink to &quot;Acelerando as compilações de CI&quot;">​</a></h1><p>Você ou sua empresa podem ter configurado um ambiente de Integração Contínua (CI) para testar seu aplicativo React Native.</p><p>Um serviço de CI rápido é importante por 2 motivos:</p><ul><li>Quanto mais tempo as máquinas de CI ficam em execução, mais elas custam.</li><li>Quanto mais tempo os trabalhos de CI levarem para serem executados, maior será o ciclo de desenvolvimento.</li></ul><p>Portanto, é importante tentar minimizar o tempo que o ambiente de CI gasta construindo o React Native.</p><h2 id="desative-o-flipper-para-ios" tabindex="-1">Desative o Flipper para iOS <a class="header-anchor" href="#desative-o-flipper-para-ios" aria-label="Permalink to &quot;Desative o Flipper para iOS&quot;">​</a></h2><p><a href="https://github.com/facebook/flipper" target="_blank" rel="noreferrer">Flipper</a> é uma ferramenta de depuração fornecida por padrão com React Native, para ajudar os desenvolvedores a depurar e criar o perfil de seus aplicativos React Native. No entanto, o Flipper não é necessário no CI: é muito improvável que você ou um de seus colegas precise depurar o aplicativo criado no ambiente de CI.</p><p>Para aplicativos iOS, o Flipper é construído toda vez que a estrutura React Native é construída e pode levar algum tempo para ser construída, e esse é o tempo que você pode economizar.</p><p>A partir do React Native 0.71, introduzimos um novo sinalizador no Podfile do modelo: o <a href="https://github.com/facebook/react-native/blob/main/packages/react-native/template/ios/Podfile#L20" target="_blank" rel="noreferrer">sinalizador NO_FLIPPER</a>.</p><p>Por padrão, o sinalizador <code>NO_FLIPPER</code> não está definido, portanto o Flipper será incluído por padrão em seu aplicativo.</p><p>Você pode especificar <code>NO_FLIPPER=1</code> ao instalar seus pods iOS, para instruir o React Native a não instalar o Flipper. Normalmente, o comando ficaria assim:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># da pasta raiz do projeto react native</span></span>
<span class="line"><span>NO_FLIPPER=1 bundle exec pod install --project-directory=ios</span></span></code></pre></div><p>Adicione este comando em seu ambiente de CI para ignorar a instalação das dependências do Flipper e, assim, economizar tempo e dinheiro.</p><h3 id="lidar-com-dependencias-transitivas" tabindex="-1">Lidar com dependências transitivas <a class="header-anchor" href="#lidar-com-dependencias-transitivas" aria-label="Permalink to &quot;Lidar com dependências transitivas&quot;">​</a></h3><p>Seu aplicativo pode estar usando algumas bibliotecas que dependem dos pods do Flipper. Se for esse o seu caso, desabilitar o flipper com o sinalizador <code>NO_FLIPPER</code> pode não ser suficiente: seu aplicativo pode falhar na construção neste caso.</p><p>A maneira correta de lidar com esse caso é adicionar uma configuração personalizada para react native, instruindo o aplicativo a instalar corretamente a dependência transitiva. Para conseguir isso:</p><ul><li>Se ainda não o fez, crie um novo arquivo chamado <code>react-native.config.js</code>.</li><li>Exclua explicitamente a dependência transitiva das dependências quando o sinalizador estiver ativado.</li></ul><p>Por exemplo, a biblioteca <code>react-native-flipper</code> é uma biblioteca adicional que depende do Flipper. Se o seu aplicativo usa isso, você precisa excluí-lo das dependências. Seu <code>react-native.config.js</code> ficaria assim:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// react-native.config.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // outros campos</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  dependencies: {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NO_FLIPPER</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      ?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;react-native-flipper&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {platforms: {ios: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}}}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      :</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div>`,19),t=[n];function p(r,l,d,c,h,u){return i(),e("div",null,t)}const v=a(o,[["render",p]]);export{k as __pageData,v as default};
