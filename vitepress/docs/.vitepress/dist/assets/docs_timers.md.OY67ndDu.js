import{_ as e,c as a,o as s,a4 as o}from"./chunks/framework.nQaBHiNx.js";const k=JSON.parse('{"title":"Temporizadores","description":"","frontmatter":{},"headers":[],"relativePath":"docs/timers.md","filePath":"docs/timers.md"}'),i={name:"docs/timers.md"},t=o(`<h1 id="temporizadores" tabindex="-1">Temporizadores <a class="header-anchor" href="#temporizadores" aria-label="Permalink to &quot;Temporizadores&quot;">​</a></h1><p>Os temporizadores são uma parte importante de um aplicativo e o React Native implementa os <a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Timeouts_and_intervals" target="_blank" rel="noreferrer">temporizadores do navegador</a>.</p><h2 id="temporizadores-1" tabindex="-1">Temporizadores <a class="header-anchor" href="#temporizadores-1" aria-label="Permalink to &quot;Temporizadores&quot;">​</a></h2><ul><li>setTimeout, clearTimeout</li><li>setInterval, clearInterval</li><li>setImmediate, clearImmediate</li><li>requestAnimationFrame, cancelAnimationFrame</li></ul><p><code>requestAnimationFrame(fn)</code> não é o mesmo que <code>setTimeout(fn, 0)</code> - o primeiro será acionado depois que todos os quadros forem liberados, enquanto o último será acionado o mais rápido possível (mais de 1000x por segundo em um iPhone 5S).</p><p><code>setImmediate</code> é executado no final do bloco de execução JavaScript atual, logo antes de enviar a resposta em lote de volta ao nativo. Observe que se você chamar <code>setImmediate</code> dentro de um retorno de chamada <code>setImmediate</code>, ele será executado imediatamente, não retornará ao nativo no meio.</p><p>A implementação do <code>Promise</code> usa <code>setImmediate</code> como implementação de assincronicidade.</p><blockquote><p><strong>OBSERVAÇÃO</strong> Ao depurar no Android, se os tempos entre o depurador e o dispositivo variaram; coisas como animação, comportamento de eventos, etc., podem não funcionar corretamente ou os resultados podem não ser precisos. Corrija isso executando <code>adb shell &quot;date </code>date +%m%d%H%M%Y.%S%3N<code>&quot;</code> em sua máquina depuradora. O acesso root é necessário para uso em dispositivos reais.</p></blockquote><h2 id="gerenciador-de-interacao" tabindex="-1">Gerenciador de interação <a class="header-anchor" href="#gerenciador-de-interacao" aria-label="Permalink to &quot;Gerenciador de interação&quot;">​</a></h2><p>Uma razão pela qual aplicativos nativos bem construídos parecem tão suaves é que evitam operações caras durante interações e animações. No React Native, atualmente temos uma limitação de que há apenas um único thread de execução JS, mas você pode usar o <code>InteractionManager</code> para garantir que o trabalho de longa execução seja programado para começar após a conclusão de quaisquer interações/animações.</p><p>Os aplicativos podem agendar tarefas para execução após interações como o seguinte:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">InteractionManager.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">runAfterInteractions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...tarefa síncrona de longa duração...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>Compare isso com outras alternativas de agendamento:</p><ul><li><code>requestAnimationFrame()</code>: para código que anima uma visualização ao longo do tempo.</li><li><code>setImmediate</code>/<code>setTimeout</code>/<code>setInterval()</code>: execute o código mais tarde, observe que isso pode atrasar as animações.</li><li><code>runAfterInteractions()</code>: executa o código posteriormente, sem atrasar as animações ativas.</li></ul><p>O sistema de tratamento de toque considera um ou mais toques ativos como uma &#39;interação&#39; e atrasará os retornos de chamada <code>runAfterInteractions()</code> até que todos os toques tenham terminado ou sejam cancelados.</p><p>O <code>InteractionManager</code> também permite que aplicativos registrem animações criando um &#39;identificador&#39; de interação no início da animação e limpando-o após a conclusão:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> handle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> InteractionManager.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createInteractionHandle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// executar animação... (as tarefas \`runAfterInteractions\` estão na fila)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// mais tarde, na conclusão da animação:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">InteractionManager.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clearInteractionHandle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(handle);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// tarefas enfileiradas serão executadas se todos os identificadores forem apagados</span></span></code></pre></div>`,17),n=[t];function r(d,c,l,p,m,u){return s(),a("div",null,n)}const g=e(i,[["render",r]]);export{k as __pageData,g as default};
