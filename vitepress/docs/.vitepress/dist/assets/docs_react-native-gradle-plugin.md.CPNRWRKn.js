import{_ as a,c as e,o as s,a4 as o}from"./chunks/framework.nQaBHiNx.js";const k=JSON.parse('{"title":"Plug-in React Native Gradle","description":"","frontmatter":{},"headers":[],"relativePath":"docs/react-native-gradle-plugin.md","filePath":"docs/react-native-gradle-plugin.md"}'),i={name:"docs/react-native-gradle-plugin.md"},t=o('<h1 id="plug-in-react-native-gradle" tabindex="-1">Plug-in React Native Gradle <a class="header-anchor" href="#plug-in-react-native-gradle" aria-label="Permalink to &quot;Plug-in React Native Gradle&quot;">​</a></h1><p>Este guia descreve como configurar o <strong>Plugin React Native Gradle</strong> (geralmente chamado de RNGP) ao criar seu aplicativo React Native para Android.</p><h2 id="usando-o-plugin" tabindex="-1">Usando o plugin <a class="header-anchor" href="#usando-o-plugin" aria-label="Permalink to &quot;Usando o plugin&quot;">​</a></h2><p>O plugin React Native Gradle é distribuído como um pacote NPM separado que é instalado automaticamente com <code>react-native</code>.</p><p>O plugin <strong>já está configurado</strong> para novos projetos criados usando <code>npx react-native init</code>. Você não precisa realizar nenhuma etapa extra para instalá-lo se tiver criado seu aplicativo com este comando.</p><p>Se você estiver integrando o React Native em um projeto existente, consulte <a href="https://reactnative.dev/docs/next/integration-with-existing-apps#configuring-gradle" target="_blank" rel="noreferrer">a página correspondente</a>: ela contém instruções específicas sobre como instalar o plugin.</p><h2 id="configurando-o-plugin" tabindex="-1">Configurando o plugin <a class="header-anchor" href="#configurando-o-plugin" aria-label="Permalink to &quot;Configurando o plugin&quot;">​</a></h2><p>Por padrão, o plugin funcionará <strong>pronto para uso</strong> com padrões razoáveis. Você deve consultar este guia e personalizar o comportamento somente se precisar.</p><p>Para configurar o plugin você pode modificar o bloco <code>react</code>, dentro do seu <code>android/app/build.gradle</code>:</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">apply </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.facebook.react&quot;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Este é o bloco de configuração para personalizar seu aplicativo React Native Android.</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Por padrão você não precisa aplicar nenhuma configuração, apenas descomente as linhas necessárias.</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">react {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // A configuração personalizada vai aqui.</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Cada chave de configuração é descrita abaixo:</p><h3 id="root" tabindex="-1"><code>root</code> <a class="header-anchor" href="#root" aria-label="Permalink to &quot;`root`&quot;">​</a></h3><p>Esta é a pasta raiz do seu projeto React Native, ou seja, onde reside o arquivo <code>package.json</code>. O padrão é <code>..</code>. Você pode personalizá-lo da seguinte maneira:</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">root </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> file(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;../&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="reactnativedir" tabindex="-1"><code>reactNativeDir</code> <a class="header-anchor" href="#reactnativedir" aria-label="Permalink to &quot;`reactNativeDir`&quot;">​</a></h3><p>Esta é a pasta onde reside o pacote <code>react-native</code>. O padrão é <code>../node_modules/react-native</code>. Se você estiver em um monorepo ou usando um gerenciador de pacotes diferente, você pode usar o ajuste <code>reactNativeDir</code> para sua configuração.</p><p>Você pode personalizá-lo da seguinte maneira:</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">reactNativeDir </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> file(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;../node_modules/react-native&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="codegendir" tabindex="-1"><code>codegenDir</code> <a class="header-anchor" href="#codegendir" aria-label="Permalink to &quot;`codegenDir`&quot;">​</a></h3><p>Esta é a pasta onde reside o pacote <code>react-native-codegen</code>. O padrão é <code>../node_modules/react-native-codegen</code>. Se você estiver em um monorepo ou usando um gerenciador de pacotes diferente, você pode ajustar <code>codegenDir</code> à sua configuração.</p><p>Você pode personalizá-lo da seguinte maneira:</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">codegenDir </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> file(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;../node_modules/@react-native/codegen&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="clifile" tabindex="-1"><code>cliFile</code> <a class="header-anchor" href="#clifile" aria-label="Permalink to &quot;`cliFile`&quot;">​</a></h3><p>Este é o arquivo de ponto de entrada para o React Native CLI. O padrão é <code>../node_modules/react-native/cli.js</code>. O arquivo do ponto de entrada é necessário porque o plug-in precisa invocar a CLI para agrupar e criar seu aplicativo.</p><p>Se você estiver em um monorepo ou usando um gerenciador de pacotes diferente, você pode ajustar o <code>cliFile</code> à sua configuração. Você pode personalizá-lo da seguinte maneira:</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cliFile </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> file(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;../node_modules/react-native/cli.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="debuggablevariants" tabindex="-1"><code>debuggableVariants</code> <a class="header-anchor" href="#debuggablevariants" aria-label="Permalink to &quot;`debuggableVariants`&quot;">​</a></h3><p>Esta é a lista de variantes que podem ser depuradas (consulte a seção <em>usando variantes</em> disponível aqui para obter mais contexto sobre variantes).</p><p>Por padrão o plugin considera como <code>debuggableVariants</code> apenas <code>debug</code>, enquanto <code>release</code> não é. Se você tiver outra variantes (como <code>staging</code>, <code>lite</code>, etc.), você precisará ajustar isso de acordo.</p><p>As variantes listadas como <code>debuggableVariants</code> não virão com um pacote, então você precisará do Metro para executá-las.</p><p>Você pode personalizá-lo da seguinte maneira:</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">debuggableVariants </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;liteDebug&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;prodDebug&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><h3 id="nodeexecutableandargs" tabindex="-1"><code>nodeExecutableAndArgs</code> <a class="header-anchor" href="#nodeexecutableandargs" aria-label="Permalink to &quot;`nodeExecutableAndArgs`&quot;">​</a></h3><p>Esta é a lista de comandos e argumentos do nó que devem ser invocados para todos os scripts. Por padrão é <code>[node]</code> mas pode ser personalizado para adicionar sinalizadores extras como segue:</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nodeExecutableAndArgs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><h3 id="bundlecommand" tabindex="-1"><code>bundleCommand</code> <a class="header-anchor" href="#bundlecommand" aria-label="Permalink to &quot;`bundleCommand`&quot;">​</a></h3><p>Este é o nome do comando <code>bundle</code> a ser invocado ao criar o pacote para seu aplicativo. Isso é útil se você estiver usando <a href="/docs/ram-bundles-inline-requires.html">pacotes de RAM</a>. Por padrão é <code>bundle</code> mas pode ser personalizado para adicionar sinalizadores extras como segue:</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bundleCommand </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ram-bundle&quot;</span></span></code></pre></div><h3 id="bundleconfig" tabindex="-1"><code>bundleConfig</code> <a class="header-anchor" href="#bundleconfig" aria-label="Permalink to &quot;`bundleConfig`&quot;">​</a></h3><p>Este é o caminho para um arquivo de configuração que será passado para <code>bundle --config &lt;file&gt;</code> se fornecido. O padrão é vazio (nenhum arquivo de configuração será proibido). Mais informações sobre o agrupamento de arquivos de configuração podem ser encontradas <a href="https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle" target="_blank" rel="noreferrer">na documentação da CLI</a>. Pode ser personalizado da seguinte forma:</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bundleConfig </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> file(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">../</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cli</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">js)</span></span></code></pre></div><h3 id="bundleassetname" tabindex="-1"><code>bundleAssetName</code> <a class="header-anchor" href="#bundleassetname" aria-label="Permalink to &quot;`bundleAssetName`&quot;">​</a></h3><p>Este é o nome do arquivo do pacote que deve ser gerado. O padrão é <code>index.android.bundle</code>. Pode ser personalizado da seguinte forma:</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bundleAssetName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;MyApplication.android.bundle&quot;</span></span></code></pre></div><h3 id="entryfile" tabindex="-1"><code>entryFile</code> <a class="header-anchor" href="#entryfile" aria-label="Permalink to &quot;`entryFile`&quot;">​</a></h3><p>O arquivo de entrada usado para geração de pacote configurável. O padrão é procurar por <code>index.android.js</code> ou <code>index.js</code>. Pode ser personalizado da seguinte forma:</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">entryFile </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> file(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;../js/MyApplication.android.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="extrapackagerargs" tabindex="-1"><code>extraPackagerArgs</code> <a class="header-anchor" href="#extrapackagerargs" aria-label="Permalink to &quot;`extraPackagerArgs`&quot;">​</a></h3><p>Uma lista de sinalizadores extras que serão passados ​​para o comando <code>bundle</code>. A lista de sinalizadores disponíveis está na <a href="https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle" target="_blank" rel="noreferrer">documentação da CLI</a>. O padrão está vazio. Pode ser personalizado da seguinte forma:</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">extraPackagerArgs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []</span></span></code></pre></div><h3 id="hermescommand" tabindex="-1"><code>hermesCommand</code> <a class="header-anchor" href="#hermescommand" aria-label="Permalink to &quot;`hermesCommand`&quot;">​</a></h3><p>O caminho para o comando <code>hermesc</code> (o compilador Hermes). O React Native vem com uma versão do compilador Hermes, então geralmente você não precisará personalizá-lo. O plugin usará o compilador correto para o seu sistema por padrão.</p><h3 id="hermesflags" tabindex="-1"><code>hermesFlags</code> <a class="header-anchor" href="#hermesflags" aria-label="Permalink to &quot;`hermesFlags`&quot;">​</a></h3><p>A lista de sinalizadores a serem passados ​​para <code>hermesc</code>. Por padrão é <code>[&quot;-O&quot;, &quot;-output-source-map&quot;]</code>. Você pode personalizá-lo da seguinte maneira</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hermesFlags </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-O&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-output-source-map&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><h2 id="usando-sabores-e-variantes-de-construcao" tabindex="-1">Usando sabores e variantes de construção <a class="header-anchor" href="#usando-sabores-e-variantes-de-construcao" aria-label="Permalink to &quot;Usando sabores e variantes de construção&quot;">​</a></h2><p>Ao criar aplicativos Android, talvez você queira usar <a href="https://developer.android.com/studio/build/build-variants#product-flavors" target="_blank" rel="noreferrer">variações personalizadas</a> para ter versões diferentes do seu aplicativo a partir do mesmo projeto.</p><p>Consulte o <a href="https://developer.android.com/studio/build/build-variants" target="_blank" rel="noreferrer">guia oficial do Android</a> para configurar tipos de compilação personalizados (como <code>staging</code>) ou versões personalizadas (como <code>full</code>, <code>lite </code>, etc.).</p><p>Por padrão, novos aplicativos são criados com dois tipos de compilação (<code>debug</code> e <code>release</code>) e sem variações personalizadas.</p><p>A combinação de todos os tipos de compilação e todas as variações gera um conjunto de <strong>variantes de compilação</strong>. Por exemplo, para os tipos de compilação <code>debug</code>/<code>staging</code>/<code>release</code> e ​​<code>full</code>/<code>lite</code> você terá 6 variantes de compilação: <code>fullDebug</code>, <code>fullStaging</code>, <code>fullRelease</code> e ​​assim por diante.</p><p>Se você estiver usando variantes personalizadas além de <code>debug</code> e <code>release</code>, você precisa instruir o plugin React Native Gradle especificando quais de suas variantes são <strong>depuráveis</strong> usando a configuração <a href="#debuggablevariants"><code>debuggableVariants</code></a> da seguinte forma :</p><div class="language-diff vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">apply plugin: &quot;com.facebook.react&quot;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">react {</span></span>\n<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+ debuggableVariants = [&quot;fullStaging&quot;, &quot;fullDebug&quot;]</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Isso é necessário porque o plugin irá ignorar o empacotamento JS para todos os <code>debuggableVariants</code>: você precisará do Metro para executá-los. Por exemplo, se você listar <code>fullStaging</code> em <code>debuggableVariants</code>, não será possível publicá-lo em uma loja, pois faltará o pacote.</p><h2 id="o-que-o-plugin-esta-fazendo-nos-bastidores" tabindex="-1">O que o plugin está fazendo nos bastidores? <a class="header-anchor" href="#o-que-o-plugin-esta-fazendo-nos-bastidores" aria-label="Permalink to &quot;O que o plugin está fazendo nos bastidores?&quot;">​</a></h2><p>O plugin React Native Gradle é responsável por configurar a construção do seu aplicativo para enviar aplicativos React Native para produção. O plugin também é usado em bibliotecas de terceiros, para executar o <a href="https://github.com/reactwg/react-native-new-architecture/blob/main/docs/codegen.md" target="_blank" rel="noreferrer">Codegen</a> usado para a Nova Arquitetura.</p><p>Aqui está um resumo das responsabilidades do plugin:</p><ul><li>Adiciona uma tarefa <code>createBundle&lt;Variant&gt;JsAndAssets</code> para cada variante não depurável, que é responsável por invocar os comandos <code>bundle</code>, <code>hermesc</code> e <code>compose-source-map</code>.</li><li>Configura a versão adequada da dependência <code>com.facebook.react:react-android</code> e <code>com.facebook.react:hermes-android</code>, lendo a versão React Native do <code>package.json</code> de <code>react-native </code>.</li><li>Configura os repositórios Maven adequados (Maven Central, Google Maven Repo, repositório Maven local JSC, etc.) necessários para consumir todas as dependências Maven necessárias.</li><li>Configura o NDK para permitir a criação de aplicativos que usam a Nova Arquitetura.</li><li>Configura o <code>buildConfigFields</code> para que você possa saber em tempo de execução se o Hermes ou a Nova Arquitetura estão habilitados.</li><li>Configura a porta Metro DevServer como um recurso Android para que o aplicativo saiba em qual porta se conectar.</li><li>Invoca o <a href="https://github.com/reactwg/react-native-new-architecture/blob/main/docs/codegen.md" target="_blank" rel="noreferrer">React Native Codegen</a> se uma biblioteca ou aplicativo estiver usando o Codegen para a nova arquitetura.</li></ul>',67),n=[t];function r(d,l,p,c,h,u){return s(),e("div",null,n)}const v=a(i,[["render",r]]);export{k as __pageData,v as default};
