import{_ as a,c as e,o as s,a4 as o}from"./chunks/framework.nQaBHiNx.js";const m=JSON.parse('{"title":"Publicação na Google Play Store","description":"","frontmatter":{},"headers":[],"relativePath":"docs/signed-apk-android.md","filePath":"docs/signed-apk-android.md"}'),i={name:"docs/signed-apk-android.md"},n=o(`<h1 id="publicacao-na-google-play-store" tabindex="-1">Publicação na Google Play Store <a class="header-anchor" href="#publicacao-na-google-play-store" aria-label="Permalink to &quot;Publicação na Google Play Store&quot;">​</a></h1><p>O Android exige que todos os aplicativos sejam assinados digitalmente com um certificado antes de serem instalados. Para distribuir seu aplicativo Android pela <a href="https://play.google.com/store" target="_blank" rel="noreferrer">Google Play Store</a>, ele precisa ser assinado com uma chave de versão que deverá ser usada em todas as atualizações futuras. Desde 2017, o Google Play pode gerenciar versões de assinatura automaticamente graças à funcionalidade <a href="https://developer.android.com/studio/publish/app-signing#app-signing-google-play" target="_blank" rel="noreferrer">App Signing by Google Play</a> . No entanto, antes de o binário do seu aplicativo ser carregado no Google Play, ele precisa ser assinado com uma chave de upload. A página <a href="https://developer.android.com/tools/publishing/app-signing.html" target="_blank" rel="noreferrer">Assinando seus aplicativos</a> na documentação para desenvolvedores Android descreve o tópico em detalhes. Este guia aborda resumidamente o processo, bem como lista as etapas necessárias para empacotar o pacote JavaScript.</p><div class="info custom-block"><p class="custom-block-title">INFORMAÇÃO</p><p>Se você estiver usando a Expo, leia o guia da Expo para <a href="https://docs.expo.dev/distribution/app-stores/" target="_blank" rel="noreferrer">Implantação nas App Stores</a> para criar e enviar seu aplicativo para a Google Play Store. Este guia funciona com qualquer aplicativo React Native para automatizar o processo de implantação.</p></div><h2 id="gerando-uma-chave-de-upload" tabindex="-1">Gerando uma chave de upload <a class="header-anchor" href="#gerando-uma-chave-de-upload" aria-label="Permalink to &quot;Gerando uma chave de upload&quot;">​</a></h2><p>Você pode gerar uma chave de assinatura privada usando <code>keytool</code>.</p><h3 id="windows" tabindex="-1">Windows <a class="header-anchor" href="#windows" aria-label="Permalink to &quot;Windows&quot;">​</a></h3><p>No Windows <code>keytool</code> deve ser executado em <code>C:\\Program Files\\Java\\jdkx.x.x_x\\bin</code>, como administrador.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">keytool</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -genkeypair</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -storetype</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PKCS12</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -keystore</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-upload-key.keystore</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -alias</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-key-alias</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -keyalg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RSA</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -keysize</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2048</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -validity</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10000</span></span></code></pre></div><p>Este comando solicita senhas para o keystore e a chave para os campos &quot;Distinguished Name&quot; da sua chave. Em seguida, ele gera o keystore como um arquivo chamado <code>my-upload-key.keystore</code>.</p><p>O keystore contém uma única chave, válida por 10.000 dias. O alias é um nome que você usará posteriormente ao assinar seu aplicativo, portanto, lembre-se de anotar o alias.</p><h3 id="mac-os" tabindex="-1">Mac OS <a class="header-anchor" href="#mac-os" aria-label="Permalink to &quot;Mac OS&quot;">​</a></h3><p>No macOS, se você não tiver certeza de onde está a pasta bin do JDK, execute o seguinte comando para localizá-la:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/usr/libexec/java_home</span></span></code></pre></div><p>Ele gerará o diretório do JDK, que será parecido com isto:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/Library/Java/JavaVirtualMachines/jdkX.X.X_XXX.jdk/Contents/Home</span></span></code></pre></div><p>Navegue até esse diretório usando o comando <code>cd /your/jdk/path</code> e use o comando keytool com permissão sudo conforme mostrado abaixo.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> keytool</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -genkey</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -keystore</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-upload-key.keystore</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -alias</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-key-alias</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -keyalg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RSA</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -keysize</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2048</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -validity</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10000</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">ATENÇÃO</p><p>Lembre-se de manter o arquivo keystore privado. Caso você tenha perdido a chave de upload ou ela tenha sido comprometida, <a href="https://support.google.com/googleplay/android-developer/answer/7384423#reset" target="_blank" rel="noreferrer">siga estas instruções</a>.</p></div><h2 id="configurando-variaveis-​​gradle" tabindex="-1">Configurando variáveis ​​Gradle <a class="header-anchor" href="#configurando-variaveis-​​gradle" aria-label="Permalink to &quot;Configurando variáveis ​​Gradle&quot;">​</a></h2><ol><li>Coloque o arquivo <code>my-upload-key.keystore</code> no diretório <code>android/app</code> na pasta do seu projeto.</li><li>Edite o arquivo <code>~/.gradle/gradle.properties</code> ou <code>android/gradle.properties</code> e adicione o seguinte (substitua <code>*****</code> pela senha correta do keystore, alias e senha da chave),</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>MYAPP_UPLOAD_STORE_FILE=my-upload-key.keystore</span></span>
<span class="line"><span>MYAPP_UPLOAD_KEY_ALIAS=my-key-alias</span></span>
<span class="line"><span>MYAPP_UPLOAD_STORE_PASSWORD=*****</span></span>
<span class="line"><span>MYAPP_UPLOAD_KEY_PASSWORD=*****</span></span></code></pre></div><p>Essas serão variáveis ​​globais do Gradle, que poderemos usar posteriormente em nossa configuração do Gradle para assinar nosso aplicativo.</p><div class="info custom-block"><p class="custom-block-title">Nota sobre o uso do git</p><p>Salvar as variáveis ​​Gradle acima em <code>~/.gradle/gradle.properties</code> em vez de <code>android/gradle.properties</code> impede que elas sejam registradas no git. Talvez seja necessário criar o arquivo <code>~/.gradle/gradle.properties</code> no diretório inicial do usuário antes de adicionar as variáveis.</p></div><div class="info custom-block"><p class="custom-block-title">Nota sobre segurança</p><p>Se você não deseja armazenar suas senhas em texto simples e estiver executando o macOS, você também pode [armazenar suas credenciais no aplicativo Keychain Access](<a href="https://pilloxa.gitlab.io/posts/safer-passwords-in-" target="_blank" rel="noreferrer">https://pilloxa.gitlab.io/posts/safer-passwords-in-</a> grau/). Então você pode pular as duas últimas linhas em <code>~/.gradle/gradle.properties</code>.</p></div><h2 id="adicionando-configuracao-de-assinatura-a-configuracao-gradle-do-seu-aplicativo" tabindex="-1">Adicionando configuração de assinatura à configuração Gradle do seu aplicativo <a class="header-anchor" href="#adicionando-configuracao-de-assinatura-a-configuracao-gradle-do-seu-aplicativo" aria-label="Permalink to &quot;Adicionando configuração de assinatura à configuração Gradle do seu aplicativo&quot;">​</a></h2><p>A última etapa de configuração que precisa ser feita é configurar as compilações de versão para serem assinadas usando a chave de upload. Edite o arquivo <code>android/app/build.gradle</code> na pasta do seu projeto e adicione a configuração de assinatura,</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>...</span></span>
<span class="line"><span>android {</span></span>
<span class="line"><span>    ...</span></span>
<span class="line"><span>    defaultConfig { ... }</span></span>
<span class="line"><span>    signingConfigs {</span></span>
<span class="line"><span>        release {</span></span>
<span class="line"><span>            if (project.hasProperty(&#39;MYAPP_UPLOAD_STORE_FILE&#39;)) {</span></span>
<span class="line"><span>                storeFile file(MYAPP_UPLOAD_STORE_FILE)</span></span>
<span class="line"><span>                storePassword MYAPP_UPLOAD_STORE_PASSWORD</span></span>
<span class="line"><span>                keyAlias MYAPP_UPLOAD_KEY_ALIAS</span></span>
<span class="line"><span>                keyPassword MYAPP_UPLOAD_KEY_PASSWORD</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    buildTypes {</span></span>
<span class="line"><span>        release {</span></span>
<span class="line"><span>            ...</span></span>
<span class="line"><span>            signingConfig signingConfigs.release</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>...</span></span></code></pre></div><h2 id="gerando-uma-release-aab" tabindex="-1">Gerando uma release AAB <a class="header-anchor" href="#gerando-uma-release-aab" aria-label="Permalink to &quot;Gerando uma release AAB&quot;">​</a></h2><p>Execute o seguinte comando em um terminal:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> react-native</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build-android</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --mode=release</span></span></code></pre></div><p>Este comando usa o <code>bundleRelease</code> do Gradle que agrupa todo o JavaScript necessário para executar seu aplicativo no AAB (<a href="https://developer.android.com/guide/app-bundle" target="_blank" rel="noreferrer">Android App Bundle</a>). Se você precisar alterar a forma como o pacote JavaScript e/ou os recursos drawable são agrupados (por exemplo, se você alterou os nomes de arquivos/pastas padrão ou a estrutura geral do projeto), dê uma olhada em <code>android/app/build.gradle</code> para ver como você pode atualizá-lo para refletir essas alterações.</p><div class="info custom-block"><p class="custom-block-title">INFORMAÇÃO</p><p>Certifique-se de que <code>gradle.properties</code> não inclua <code>org.gradle.configureondemand=true</code>, pois isso fará com que a compilação de lançamento ignore o agrupamento de JS e ativos no binário do aplicativo.</p></div><p>O AAB gerado pode ser encontrado em <code>android/app/build/outputs/bundle/release/app-release.aab</code> e está pronto para ser carregado no Google Play.</p><p>Para que o Google Play aceite o formato AAB, a assinatura de aplicativos do Google Play precisa ser configurada para seu aplicativo no Google Play Console. Se você estiver atualizando um aplicativo existente que não usa a assinatura de aplicativos do Google Play, consulte a <em>seção de migração</em> para aprender como realizar essa alteração na configuração.</p><h2 id="testando-a-versao-de-lancamento-do-seu-aplicativo" tabindex="-1">Testando a versão de lançamento do seu aplicativo <a class="header-anchor" href="#testando-a-versao-de-lancamento-do-seu-aplicativo" aria-label="Permalink to &quot;Testando a versão de lançamento do seu aplicativo&quot;">​</a></h2><p>Antes de enviar a versão de lançamento para a Play Store, teste-a completamente. Primeiro desinstale qualquer versão anterior do aplicativo que você já instalou. Instale-o no dispositivo usando o seguinte comando na raiz do projeto:</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-VikiJ" id="tab-4iG1jor" checked="checked"><label for="tab-4iG1jor">npm</label><input type="radio" name="group-VikiJ" id="tab-Ld3o4Uj"><label for="tab-Ld3o4Uj">yarn</label></div><div class="blocks"><div class="language-bash vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> android</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --mode=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;release&quot;</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> android</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --mode</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> release</span></span></code></pre></div></div></div><p>Observe que <code>--mode release</code> só está disponível se você configurou a assinatura conforme descrito acima.</p><p>Você pode encerrar qualquer instância do bundler em execução, já que toda a estrutura e o código JavaScript estão agrupados nos ativos do APK.</p><h2 id="publicacao-em-outras-lojas" tabindex="-1">Publicação em outras lojas <a class="header-anchor" href="#publicacao-em-outras-lojas" aria-label="Permalink to &quot;Publicação em outras lojas&quot;">​</a></h2><p>Por padrão, o APK gerado possui o código nativo para as arquiteturas de CPU <code>x86</code>, <code>x86_64</code>, <code>ARMv7a</code> e <code>ARM64-v8a</code>. Isso facilita o compartilhamento de APKs executados em quase todos os dispositivos Android. No entanto, isso tem a desvantagem de que haverá algum código nativo não utilizado em qualquer dispositivo, levando a APKs desnecessariamente maiores.</p><p>Você pode criar um APK para cada CPU adicionando a seguinte linha em seu arquivo <code>android/app/build.gradle</code>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>android {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    splits {</span></span>
<span class="line"><span>        abi {</span></span>
<span class="line"><span>            reset()</span></span>
<span class="line"><span>            enable true</span></span>
<span class="line"><span>            universalApk false</span></span>
<span class="line"><span>            include &quot;armeabi-v7a&quot;, &quot;arm64-v8a&quot;, &quot;x86&quot;, &quot;x86_64&quot;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre></div><p>Faça upload desses arquivos para mercados que oferecem suporte à segmentação por dispositivo, como <a href="https://developer.amazon.com/docs/app-submission/device-filtering-and-compatibility.html" target="_blank" rel="noreferrer">Amazon AppStore</a> ou <a href="https://f-droid.org/en/" target="_blank" rel="noreferrer">F-Droid</a>, e os usuários obterão automaticamente o APK apropriado. Se você quiser fazer upload para outros mercados, como <a href="https://www.apkfiles.com/" target="_blank" rel="noreferrer">APKFiles</a>, que não suportam vários APKs para um único aplicativo, altere a linha <code>universalApk false</code> para <code>true</code> para crie o APK universal padrão com binários para ambas as CPUs.</p><p>Observe que você também terá que configurar códigos de versão distintos, conforme <a href="https://developer.android.com/studio/build/configure-apk-splits#configure-APK-versions" target="_blank" rel="noreferrer">sugerido nesta página</a> do site oficial da Documentação do Android.</p><h2 id="habilitando-o-proguard-para-reduzir-o-tamanho-do-apk-opcional" tabindex="-1">Habilitando o Proguard para reduzir o tamanho do APK (opcional) <a class="header-anchor" href="#habilitando-o-proguard-para-reduzir-o-tamanho-do-apk-opcional" aria-label="Permalink to &quot;Habilitando o Proguard para reduzir o tamanho do APK (opcional)&quot;">​</a></h2><p>Proguard é uma ferramenta que pode reduzir ligeiramente o tamanho do APK. Isso é feito removendo partes do bytecode React Native Java (e suas dependências) que seu aplicativo não está usando.</p><div class="warning custom-block"><p class="custom-block-title">Importante</p><p>Certifique-se de testar completamente seu aplicativo se você ativou o Proguard. O Proguard geralmente requer configuração específica para cada biblioteca nativa que você está usando. Consulte <code>app/proguard-rules.pro</code>.</p></div><p>Para ativar o Proguard, edite <code>android/app/build.gradle</code>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>/**</span></span>
<span class="line"><span> * Execute o Proguard para reduzir o bytecode Java em compilações de lançamento.</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>def enableProguardInReleaseBuilds = true</span></span></code></pre></div><h2 id="migrando-aplicativos-antigos-do-android-react-native-para-usar-o-app-signing-do-google-play" tabindex="-1">Migrando aplicativos antigos do Android React Native para usar o App Signing do Google Play <a class="header-anchor" href="#migrando-aplicativos-antigos-do-android-react-native-para-usar-o-app-signing-do-google-play" aria-label="Permalink to &quot;Migrando aplicativos antigos do Android React Native para usar o App Signing do Google Play&quot;">​</a></h2><p>Se você estiver migrando da versão anterior do React Native, é provável que seu aplicativo não use o recurso App Signing by Google Play. Recomendamos que você habilite isso para aproveitar recursos como a divisão automática de aplicativos. Para migrar da forma antiga de assinatura, você precisa começar <a href="#generating-an-upload-key">gerando nova chave de upload</a> e, em seguida, substituindo a configuração de assinatura de lançamento em <code>android/app/build.gradle</code> para usar o chave de upload em vez da de lançamento (consulte a seção sobre <a href="#adding-signing-config-to-your-apps-gradle-config">adicionando configuração de assinatura ao gradle</a>). Feito isso, siga as <a href="https://support.google.com/googleplay/android-developer/answer/7384423" target="_blank" rel="noreferrer">instruções do site de ajuda do Google Play</a> para enviar sua chave de versão original ao Google Play.</p><h2 id="permissoes-padrao" tabindex="-1">Permissões padrão <a class="header-anchor" href="#permissoes-padrao" aria-label="Permalink to &quot;Permissões padrão&quot;">​</a></h2><p>Por padrão, a permissão <code>INTERNET</code> é adicionada ao seu aplicativo Android, pois praticamente todos os aplicativos a utilizam. A permissão <code>SYSTEM_ALERT_WINDOW</code> é adicionada ao seu APK Android no modo de depuração, mas será removida na produção.</p>`,54),r=[n];function p(t,d,l,c,u,h){return s(),e("div",null,r)}const v=a(i,[["render",p]]);export{m as __pageData,v as default};
